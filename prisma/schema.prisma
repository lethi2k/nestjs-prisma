generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id              String          @id @default(uuid())
  fullName        String
  role            String
  description     String?
  systemPrompt    String          @db.VarChar(4096)
  userId          String
  avatarUrl       String?
  modelId         String
  model           Model           @relation(fields: [modelId], references: [id])
  modelParameters Json
  isPublic        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  knowledgeBases  KnowledgeBase[]
  tools           Tool[]
  chatSessions    ChatSession[]
}

model Model {
  id          String   @id @default(uuid())
  provider    String
  name        String
  type        String   @default("text-to-text")
  label       String
  description String?
  vision      Boolean  @default(false)
  audio       Boolean  @default(false)
  apikeys     String[]
  agents      Agent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KnowledgeBase {
  id        String     @id @default(uuid())
  name      String
  agentId   String
  agent     Agent      @relation(fields: [agentId], references: [id])
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  modelsId  String?
}

model Document {
  id              String        @id @default(uuid())
  name            String
  content         String
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Tool {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        ToolType
  config      Json
  agentId     String
  agent       Agent    @relation(fields: [agentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  modelsId    String?
}

model ChatSession {
  id        String        @id @default(uuid())
  agentId   String
  agent     Agent         @relation(fields: [agentId], references: [id])
  metadata  Json
  messages  ChatMessage[]
  state     ChatSessionState @default(IDLE)
  lastActivityAt DateTime @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum ChatSessionState {
  IDLE
  ACTIVE
  CLOSED
}

model ChatMessage {
  id            String          @id @default(uuid())
  chatSessionId String
  chatSession   ChatSession     @relation(fields: [chatSessionId], references: [id])
  content       String
  images        String[]
  role          ChatMessageRole
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum ToolType {
  MARKETPLACE
  CUSTOM_API
  CUSTOM_FUNCTION
}

enum ChatMessageRole {
  SYSTEM
  USER
  ASSISTANT
  TOOL
}

enum LanguageCode {
  EN
  FR
  ES
  // Add other language codes as needed
}

model AbstractEntity {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  translations AbstractTranslationEntity[]

  @@map("abstract_entity") // Optional: Map Prisma model to a specific table name
}

model AbstractTranslationEntity {
  id          String   @id @default(uuid())
  languageCode LanguageCode
  abstractEntityId String
  abstractEntity AbstractEntity @relation(fields: [abstractEntityId], references: [id])

  @@map("abstract_translation_entity") // Optional: Map Prisma model to a specific table name
}

// schema.prisma

model User {
  id        Int          @id @default(autoincrement())
  firstName String?      // Optional field
  lastName  String?      // Optional field
  role      RoleType     @default(USER)
  email     String?      @unique
  password  String?      // Optional field
  phone     String?      // Optional field
  avatar    String?      // Optional field
  fullName  String?      // Handle computed fields in application logic
  settings  UserSettings? @relation("UserSettingsRelation") // Use a named relation
  posts     Post[]

  userId    Int?
}

model UserSettings {
  id                Int      @id @default(autoincrement())
  isEmailVerified   Boolean  @default(false)
  isPhoneVerified   Boolean  @default(false)
  userId            Int      @unique
  user              User     @relation("UserSettingsRelation", fields: [userId], references: [id])
}

enum RoleType {
  USER
  ADMIN
}

model Post {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}
